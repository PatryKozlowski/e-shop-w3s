// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Jeans {
  id          String        @id @default(uuid())
  name        String
  description String
  image       String
  price       Float
  type        JeansType     @default(normal)
  info        JeansInfo     @default(none)
  sizeXS      JeansSizeXS[]
  sizeS       JeansSizeS[]
  sizeM       JeansSizeM[]
  sizeL       JeansSizeL[]
  sizeXL      JeansSizeXL[]
  rating      JeansRating[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())

  @@unique([id])
}

enum JeansType {
  normal
  skinny
  relaxed
  bootcut
  straight
}

enum JeansInfo {
  none
  new
  sale
}

model JeansRating {
  id          String  @id @unique @default(uuid())
  rate        Float   @default(0)
  count       Int     @default(0)
  jeansRating Jeans?  @relation(fields: [jeansId], references: [id])
  jeansId     String? @map("jeans_id")

  @@map("jeans_rating")
}

model JeansSizeXS {
  id        String   @id @unique @default(uuid())
  size      String   @default("XS")
  stock     Int      @default(0)
  jeans     Jeans?   @relation(fields: [jeansId], references: [id])
  jeansId   String?  @unique @map("jeans_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("jeans_size_xs")
}

model JeansSizeS {
  id        String   @id @unique @default(uuid())
  size      String   @default("S")
  stock     Int      @default(0)
  jeans     Jeans?   @relation(fields: [jeansId], references: [id])
  jeansId   String?  @unique @map("jeans_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("jeans_size_s")
}

model JeansSizeM {
  id        String   @id @unique @default(uuid())
  size      String   @default("M")
  stock     Int      @default(0)
  jeans     Jeans?   @relation(fields: [jeansId], references: [id])
  jeansId   String?  @unique @map("jeans_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("jeans_size_m")
}

model JeansSizeL {
  id        String   @id @unique @default(uuid())
  size      String   @default("L")
  stock     Int      @default(0)
  jeans     Jeans?   @relation(fields: [jeansId], references: [id])
  jeansId   String?  @unique @map("jeans_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("jeans_size_l")
}

model JeansSizeXL {
  id        String   @id @unique @default(uuid())
  size      String   @default("XL")
  stock     Int      @default(0)
  jeans     Jeans?   @relation(fields: [jeansId], references: [id])
  jeansId   String?  @unique @map("jeans_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("jeans_size_xl")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role @default(user)
  address       UsersAdress[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Sex {
  Ms
  Mr
}

enum Role {
  admin
  user
}

model UsersAdress {
  id          String @id @default(cuid())
  userId      String @unique
  name        String
  street      String
  city        String
  sex         Sex
  phoneNumber String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
